"use strict";
/* eslint-disable no-bitwise */
exports.__esModule = true;
var jsVarStr = '[a-zA-Z_\\$][a-zA-Z_0-9]*';
var jsSingleQuoteStr = '\'[^\'\\\\]*(:?\\\\[\\s\\S][^\'\\\\]*)*\'';
var jsDoubleQuoteStr = '"[^"\\\\]*(:?\\\\[\\s\\S][^"\\\\]*)*"';
var jsQuoteStr = "(?:" + jsSingleQuoteStr + "|" + jsDoubleQuoteStr + ")";
var jsKeyStr = "(?:" + jsVarStr + "|" + jsQuoteStr + ")";
var jsPropStr = "(?:\\." + jsVarStr + "|\\[" + jsQuoteStr + "\\])";
var jsEmptyStr = '(?:\'\'|"")';
var reverseStr = ':function\\(a\\)\\{'
    + '(?:return )?a\\.reverse\\(\\)'
    + '\\}';
var sliceStr = ':function\\(a,b\\)\\{'
    + 'return a\\.slice\\(b\\)'
    + '\\}';
var spliceStr = ':function\\(a,b\\)\\{'
    + 'a\\.splice\\(0,b\\)'
    + '\\}';
var swapStr = ':function\\(a,b\\)\\{'
    + 'var c=a\\[0\\];a\\[0\\]=a\\[b(?:%a\\.length)?\\];a\\[b(?:%a\\.length)?\\]=c(?:;return a)?'
    + '\\}';
var actionsObjRegexp = new RegExp("var (" + jsVarStr + ")=\\{((?:(?:" + jsKeyStr + reverseStr + "|" + jsKeyStr + sliceStr + "|" + jsKeyStr + spliceStr + "|" + jsKeyStr + swapStr + "),?\\r?\\n?)+)\\};");
var actionsFuncRegexp = new RegExp("" + ("function(?: " + jsVarStr + ")?\\(a\\)\\{"
    + ("a=a\\.split\\(" + jsEmptyStr + "\\);\\s*")
    + ("((?:(?:a=)?" + jsVarStr)) + jsPropStr + "\\(a,\\d+\\);)+)"
    + ("return a\\.join\\(" + jsEmptyStr + "\\)")
    + '\\}');
var reverseRegexp = new RegExp("(?:^|,)(" + jsKeyStr + ")" + reverseStr, 'm');
var sliceRegexp = new RegExp("(?:^|,)(" + jsKeyStr + ")" + sliceStr, 'm');
var spliceRegexp = new RegExp("(?:^|,)(" + jsKeyStr + ")" + spliceStr, 'm');
var swapRegexp = new RegExp("(?:^|,)(" + jsKeyStr + ")" + swapStr, 'm');
var swapHeadAndPosition = function (arr, position) {
    var result = arr;
    var first = result[0];
    result[0] = result[position % result.length];
    result[position] = first;
    return result;
};
function decipher(tokens, sig) {
    var sigChars = sig.split('');
    for (var i = 0, len = tokens.length; i < len; i += 1) {
        var token = tokens[i];
        var pos = void 0;
        switch (token[0]) {
            case 'r':
                sigChars = sigChars.reverse();
                break;
            case 'w':
                pos = ~~token.slice(1);
                sigChars = swapHeadAndPosition(sigChars, pos);
                break;
            case 's':
                pos = ~~token.slice(1);
                sigChars = sigChars.slice(pos);
                break;
            case 'p':
                pos = ~~token.slice(1);
                sigChars.splice(0, pos);
                break;
            default: break;
        }
    }
    return sigChars.join('');
}
exports.decipher = decipher;
function extractActions(body) {
    var objResult = actionsObjRegexp.exec(body);
    var funcResult = actionsFuncRegexp.exec(body);
    if (!objResult || !funcResult) {
        return null;
    }
    var obj = objResult[1].replace(/\$/g, '\\$');
    var objBody = objResult[2].replace(/\$/g, '\\$');
    var funcBody = funcResult[1].replace(/\$/g, '\\$');
    var result = reverseRegexp.exec(objBody);
    var reverseKey = result && result[1]
        .replace(/\$/g, '\\$')
        .replace(/\$|^'|^"|'$|"$/g, '');
    result = sliceRegexp.exec(objBody);
    var sliceKey = result && result[1]
        .replace(/\$/g, '\\$')
        .replace(/\$|^'|^"|'$|"$/g, '');
    result = spliceRegexp.exec(objBody);
    var spliceKey = result && result[1]
        .replace(/\$/g, '\\$')
        .replace(/\$|^'|^"|'$|"$/g, '');
    result = swapRegexp.exec(objBody);
    var swapKey = result && result[1]
        .replace(/\$/g, '\\$')
        .replace(/\$|^'|^"|'$|"$/g, '');
    var keys = "(" + [reverseKey, sliceKey, spliceKey, swapKey].join('|') + ")";
    var myreg = "(?:a=)?" + obj + "(?:\\." + keys + "|\\['" + keys + "'\\]|\\[\"" + keys + "\"\\])"
        + '\\(a,(\\d+)\\)';
    var tokenizeRegexp = new RegExp(myreg, 'g');
    var tokens = [];
    result = tokenizeRegexp.exec(funcBody);
    while (result !== null) {
        var key = result[1] || result[2] || result[3];
        switch (key) {
            case swapKey:
                tokens.push("w" + result[4]);
                break;
            case reverseKey:
                tokens.push('r');
                break;
            case sliceKey:
                tokens.push("s" + result[4]);
                break;
            case spliceKey:
                tokens.push("p" + result[4]);
                break;
            default: break;
        }
        result = tokenizeRegexp.exec(funcBody);
    }
    return tokens;
}
exports["default"] = extractActions;
