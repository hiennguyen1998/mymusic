"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
exports.__esModule = true;
var readline = __importStar(require("readline"));
var ProgressBar = /** @class */ (function () {
    function ProgressBar(total, preText, logger) {
        this.total = total;
        this.current = 0;
        this.preText = preText || 'Current progress';
        this.logger = logger;
        var columns = process.stdout.columns;
        this.barLength = columns <= 75 ? columns - 30 : 45;
        this.update(this.current);
    }
    /**
     * Function updates the progress bar, adding # to proceed.
     * @param newLength Stores the length to be updated by
     */
    ProgressBar.prototype.update = function (newLength) {
        this.current += newLength;
        var currentProgress = this.current / this.total;
        var filledBarLength = Number((currentProgress * this.barLength).toFixed(0));
        var emptyBarLength = this.barLength - filledBarLength;
        var percentageProgress = (currentProgress * 100).toFixed(2);
        if (filledBarLength <= this.barLength && Number(percentageProgress) <= 100) {
            this.draw(filledBarLength, emptyBarLength, percentageProgress);
            return 'full';
        }
        return 'filling';
    };
    /**
     * Draws the bar on stdout
     * @param filledBarLength Stores length of filled bar
     * @param emptyBarLength Stores length of remaining bar
     * @param percentageProgress Stores progress in percentage
     */
    ProgressBar.prototype.draw = function (filledBarLength, emptyBarLength, percentageProgress) {
        var filledBar = '#'.repeat(filledBarLength);
        var emptyBar = '.'.repeat(emptyBarLength);
        readline.clearLine(process.stdout, 0);
        readline.cursorTo(process.stdout, 0);
        if (this.logger) {
            var _a = this.logger.levels, error = _a.error, warn = _a.warn, acceptedLevels = __rest(_a, ["error", "warn"]);
            if (acceptedLevels[this.logger.level]) {
                if (percentageProgress === '0.00') {
                    process.stdout.write('\n');
                }
                process.stdout.write(this.preText + ": [" + filledBar + emptyBar + "] | " + percentageProgress + "%");
                if (percentageProgress === '100.00') {
                    process.stdout.write('\n\n');
                }
            }
        }
    };
    return ProgressBar;
}());
exports["default"] = ProgressBar;
