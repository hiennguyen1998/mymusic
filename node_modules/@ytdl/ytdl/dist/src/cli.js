"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var commander_1 = require("commander");
var logger_1 = __importDefault(require("./utils/logger"));
var ytdl_1 = __importDefault(require("./ytdl"));
var package_json_1 = __importDefault(require("../package.json"));
/**
 * Sets options in the `program`.
 * @param program Stores the commander.Command object
 */
function setOptions(program) {
    program
        .option('-l, --link <url>', 'set the url for the YouTube video')
        .option('-n, --name <name>', 'search by name instead of link')
        .option('-i, --info', 'info about YouTube link')
        .option('-d, --download', 'download from YouTube link')
        .option('-p, --play', 'play YouTube media in your media player')
        .option('--set-player <media-player>', 'set the media player')
        .option('-fn, --filename <filename>', 'filename of downloaded content')
        .option('-q, --quality <quality>', 'quality of downloaded content')
        .option('-s, --size', 'get the size of the video to be downloaded')
        .option('-ao, --audio-only', 'download only audio stream')
        .option('-vo, --video-only', 'download only video stream');
}
/**
 * Parses the options specified in `program`.
 * @param program Stores the commander.Command program
 */
function parseOptions(program) {
    return __awaiter(this, void 0, void 0, function () {
        var programOpts, optionsCount, ytdl, options, quality, _a, id, title, time, description, player, filename;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    programOpts = program.opts();
                    optionsCount = 0;
                    Object.keys(programOpts).forEach(function (programOpt) {
                        if (programOpts[programOpt])
                            optionsCount += 1;
                    });
                    if (optionsCount <= 1)
                        program.help();
                    if ((program.download
                        || program.info
                        || program.size
                        || program.play)
                        && !(program.link || programOpts.name)) {
                        logger_1["default"].error('Link or name not specified, use -l or --link to specify link, -n or --name to specify name.');
                        return [2 /*return*/];
                    }
                    if (!program.link) return [3 /*break*/, 2];
                    return [4 /*yield*/, ytdl_1["default"].init(program.link)];
                case 1:
                    ytdl = _b.sent();
                    return [3 /*break*/, 4];
                case 2:
                    if (!programOpts.name) return [3 /*break*/, 4];
                    return [4 /*yield*/, ytdl_1["default"].fromName(programOpts.name)];
                case 3:
                    ytdl = _b.sent();
                    _b.label = 4;
                case 4:
                    ytdl.setLogLevel('info');
                    options = {
                        audioOnly: !!program.audioOnly,
                        videoOnly: !!program.videoOnly
                    };
                    quality = program.quality || 'any';
                    if (program.size) {
                        logger_1["default"].info("Size: " + ytdl.info.size(quality));
                    }
                    if (program.info) {
                        _a = ytdl.info.all(), id = _a.id, title = _a.title, time = _a.time, description = _a.description;
                        logger_1["default"].info("Video ID: " + id);
                        logger_1["default"].info("Video Title: " + title);
                        logger_1["default"].info("Video Time: " + time);
                        logger_1["default"].info("Video Description:\n " + description);
                    }
                    if (!program.play) return [3 /*break*/, 6];
                    return [4 /*yield*/, ytdl.play(quality, options, program.setPlayer)];
                case 5:
                    player = _b.sent();
                    logger_1["default"].info("Playing on " + player.player + ".");
                    _b.label = 6;
                case 6:
                    if (!program.download) return [3 /*break*/, 8];
                    filename = program.filename || ytdl.info.videoTitle + ".mp4";
                    // TODO: download by itag
                    logger_1["default"].info("Downloading: " + ytdl.info.videoTitle);
                    return [4 /*yield*/, ytdl.download(quality, filename, options)];
                case 7:
                    _b.sent();
                    _b.label = 8;
                case 8: return [2 /*return*/];
            }
        });
    });
}
/**
 * Main function for CLI, to be exported.
 * @param args Stores process.argv as string array
 */
function cli(args) {
    return __awaiter(this, void 0, void 0, function () {
        var program;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    program = new commander_1.Command();
                    program.version(package_json_1["default"].version);
                    setOptions(program);
                    program.parse(args);
                    return [4 /*yield*/, parseOptions(program)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports["default"] = cli;
exports.cli = cli;
