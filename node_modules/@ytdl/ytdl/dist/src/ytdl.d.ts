import { Logger } from 'winston';
import VideoData from './videoData';
import Player from './utils/player';
export default class Ytdl {
    readonly link: string;
    readonly info: VideoData;
    private videoDownloader;
    logger: Logger;
    /**
     * Creates a `Ytdl` object with `link` and `videoData`.
     * @param link Stores the YouTube link
     * @param videoData Stores a videoData object
     */
    constructor(link: string, videoData: VideoData);
    /**
     * Returns a `Ytdl` object.
     * @param link Stores the YouTube link
     */
    static init(link: string): Promise<Ytdl>;
    /**
     * Returns a `Ytdl` object.
     * @param name Stores the name of the video to be searched
     */
    static fromName(name: string): Promise<Ytdl>;
    /**
     * Sets logging level as passed in params.
     * @param level Indicates logging level
     */
    setLogLevel(level: string): void;
    /**
     * Downloads the stream and stores in a file specified by `filename`.
     * @param qualityLabel Stores the quality
     * @param filename Stores the filename
     * @param options Stores special options like audioOnly or videoOnly
     */
    download(qualityLabel: string, filename: string, options?: {
        audioOnly?: boolean;
        videoOnly?: boolean;
    }): Promise<boolean>;
    /**
     * Downloads the video by it's `itag` and stores in the file specified by `filename`.
     * @param itag YouTube video itag
     * @param filename Stores the filename
     */
    downloadByItag(itag: number, filename: string): Promise<boolean>;
    /**
     * Returns a `Node.js` stream for a particular YouTube video.
     * @param qualityLabel Stores the quality
     * @param options Stores special options such as audioOnly or videoOnly
     * @param headers Stores additional headers if any
     */
    stream(qualityLabel: string, options?: {
        audioOnly?: boolean;
        videoOnly?: boolean;
    }, headers?: object): Promise<any>;
    /**
     * Returns a `Node.js` stream for a particular YouTube video, identifying by it's `itag`.
     * @param itag YouTube video itag
     * @param headers Stores additional headers if any
     */
    streamByItag(itag: number, headers?: object): Promise<any>;
    /**
     * Play media without downloading it from YouTube, on your locally installed media player.
     * @param qualityLabel Stores the quality
     * @param options Stores special options such as audioOnly or videoOnly
     * @param player Stores the media player (default: cvlc)
     */
    play(qualityLabel: string | number, options?: {
        audioOnly?: boolean;
        videoOnly?: boolean;
    }, player?: string): Promise<Player>;
}
