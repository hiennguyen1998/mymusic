"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var videoData_1 = __importDefault(require("./videoData"));
var videoDownloader_1 = __importDefault(require("./videoDownloader"));
var mergeStreams_1 = __importDefault(require("./utils/mergeStreams"));
var deleteFile_1 = __importDefault(require("./utils/deleteFile"));
var logger_1 = require("./utils/logger");
var getLinkFromName_1 = __importDefault(require("./utils/getLinkFromName"));
var VideoPlayer_1 = __importDefault(require("./utils/VideoPlayer"));
var AudioPlayer_1 = __importDefault(require("./utils/AudioPlayer"));
var Ytdl = /** @class */ (function () {
    /**
     * Creates a `Ytdl` object with `link` and `videoData`.
     * @param link Stores the YouTube link
     * @param videoData Stores a videoData object
     */
    function Ytdl(link, videoData) {
        this.link = link;
        this.info = videoData;
        this.logger = logger_1.createLogger('error');
    }
    /**
     * Returns a `Ytdl` object.
     * @param link Stores the YouTube link
     */
    Ytdl.init = function (link) {
        return __awaiter(this, void 0, void 0, function () {
            var videoData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, videoData_1["default"].fromLink(link)];
                    case 1:
                        videoData = _a.sent();
                        return [2 /*return*/, new Ytdl(link, videoData)];
                }
            });
        });
    };
    /**
     * Returns a `Ytdl` object.
     * @param name Stores the name of the video to be searched
     */
    Ytdl.fromName = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _b = (_a = Ytdl).init;
                        return [4 /*yield*/, getLinkFromName_1["default"](name)];
                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
                }
            });
        });
    };
    /**
     * Sets logging level as passed in params.
     * @param level Indicates logging level
     */
    Ytdl.prototype.setLogLevel = function (level) {
        this.logger = logger_1.createLogger(level);
    };
    /**
     * Downloads the stream and stores in a file specified by `filename`.
     * @param qualityLabel Stores the quality
     * @param filename Stores the filename
     * @param options Stores special options like audioOnly or videoOnly
     */
    Ytdl.prototype.download = function (qualityLabel, filename, options) {
        return __awaiter(this, void 0, void 0, function () {
            var opts, url, content;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        opts = options;
                        if (!opts) {
                            opts = { audioOnly: false, videoOnly: false };
                        }
                        else if (opts.audioOnly && opts.videoOnly) {
                            throw new Error('audioOnly and videoOnly can\'t be true simultaneously.');
                        }
                        if (!filename || typeof filename !== 'string') {
                            throw new Error('filename is missing.');
                        }
                        url = this.info.fetchFormatData(qualityLabel, options).url;
                        if (!url) return [3 /*break*/, 2];
                        content = 'video';
                        if (opts.audioOnly) {
                            content = 'audio stream';
                        }
                        else if (opts.videoOnly) {
                            content = 'video stream';
                        }
                        this.logger.info("Fetching " + content + "...");
                        if (!this.videoDownloader || !(this.videoDownloader.url === url)) {
                            this.videoDownloader = new videoDownloader_1["default"](url, this.logger);
                        }
                        return [4 /*yield*/, this.videoDownloader.download(filename)];
                    case 1:
                        _a.sent();
                        this.logger.info("Downloaded " + content + ".");
                        return [3 /*break*/, 7];
                    case 2:
                        if (!(!opts.audioOnly && !opts.videoOnly)) return [3 /*break*/, 6];
                        return [4 /*yield*/, Promise.all([
                                this.download(qualityLabel, filename + ".vid", { videoOnly: true }),
                                this.download('any', filename + ".aud", { audioOnly: true }),
                            ])];
                    case 3:
                        _a.sent();
                        this.logger.info('Merging streams...');
                        return [4 /*yield*/, mergeStreams_1["default"](filename + ".vid", filename + ".aud", filename)];
                    case 4:
                        _a.sent();
                        this.logger.info('Finished merging!');
                        return [4 /*yield*/, Promise.all([
                                deleteFile_1["default"](filename + ".vid"),
                                deleteFile_1["default"](filename + ".aud"),
                            ])];
                    case 5:
                        _a.sent();
                        this.logger.info('Video download complete.');
                        return [3 /*break*/, 7];
                    case 6:
                        this.logger.error('No links found matching specified options.');
                        return [2 /*return*/, false];
                    case 7: return [2 /*return*/, true];
                }
            });
        });
    };
    /**
     * Downloads the video by it's `itag` and stores in the file specified by `filename`.
     * @param itag YouTube video itag
     * @param filename Stores the filename
     */
    Ytdl.prototype.downloadByItag = function (itag, filename) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!filename || typeof filename !== 'string') {
                            throw new Error('filename is missing.');
                        }
                        url = this.info.fetchFormatDataByItag(itag).url;
                        if (!url) return [3 /*break*/, 2];
                        this.logger.info('Fetching content...');
                        if (!this.videoDownloader || !(this.videoDownloader.url === url)) {
                            this.videoDownloader = new videoDownloader_1["default"](url, this.logger);
                        }
                        return [4 /*yield*/, this.videoDownloader.download(filename)];
                    case 1:
                        _a.sent();
                        this.logger.info('Downloaded content...');
                        return [3 /*break*/, 3];
                    case 2:
                        this.logger.error('No links found matching specified options.');
                        return [2 /*return*/, false];
                    case 3: return [2 /*return*/, true];
                }
            });
        });
    };
    /**
     * Returns a `Node.js` stream for a particular YouTube video.
     * @param qualityLabel Stores the quality
     * @param options Stores special options such as audioOnly or videoOnly
     * @param headers Stores additional headers if any
     */
    Ytdl.prototype.stream = function (qualityLabel, options, headers) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                url = this.info.fetchFormatData(qualityLabel, options).url;
                if (!url) {
                    return [2 /*return*/, Promise.resolve()];
                }
                if (!this.videoDownloader || !(this.videoDownloader.url === url)) {
                    this.videoDownloader = new videoDownloader_1["default"](url, this.logger);
                }
                return [2 /*return*/, this.videoDownloader.stream(headers)];
            });
        });
    };
    /**
     * Returns a `Node.js` stream for a particular YouTube video, identifying by it's `itag`.
     * @param itag YouTube video itag
     * @param headers Stores additional headers if any
     */
    Ytdl.prototype.streamByItag = function (itag, headers) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                url = this.info.fetchFormatDataByItag(itag).url;
                if (!url) {
                    return [2 /*return*/, Promise.resolve()];
                }
                if (!this.videoDownloader || !(this.videoDownloader.url === url)) {
                    this.videoDownloader = new videoDownloader_1["default"](url, this.logger);
                }
                return [2 /*return*/, this.videoDownloader.stream(headers)];
            });
        });
    };
    /**
     * Play media without downloading it from YouTube, on your locally installed media player.
     * @param qualityLabel Stores the quality
     * @param options Stores special options such as audioOnly or videoOnly
     * @param player Stores the media player (default: cvlc)
     */
    Ytdl.prototype.play = function (qualityLabel, options, player) {
        return __awaiter(this, void 0, void 0, function () {
            var url, mediaPlayer, _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (typeof qualityLabel === 'string') {
                            url = this.info.fetchFormatData(qualityLabel, options).url;
                        }
                        else if (typeof qualityLabel === 'number') {
                            url = this.info.fetchFormatDataByItag(qualityLabel).url;
                        }
                        if (!this.videoDownloader) {
                            this.videoDownloader = new videoDownloader_1["default"](url, this.logger);
                        }
                        if (options.audioOnly && !player) {
                            try {
                                mediaPlayer = new AudioPlayer_1["default"]();
                            }
                            catch (e) {
                                mediaPlayer = new VideoPlayer_1["default"]();
                            }
                        }
                        else {
                            mediaPlayer = new VideoPlayer_1["default"](player);
                        }
                        _b = (_a = mediaPlayer).play;
                        _c = [this.videoDownloader.url];
                        return [4 /*yield*/, this.videoDownloader.stream()];
                    case 1:
                        _b.apply(_a, _c.concat([_d.sent()]));
                        return [2 /*return*/, mediaPlayer];
                }
            });
        });
    };
    return Ytdl;
}());
exports["default"] = Ytdl;
